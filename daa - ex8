#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define MAX_NODES 100  // Adjust this as needed

int u[MAX_NODES][MAX_NODES];  // Capacity matrix
int x[MAX_NODES][MAX_NODES];  // Flow matrix
int l[MAX_NODES];            // Labels for vertices
int queue[MAX_NODES];        // Queue for BFS
int front, rear;             // Queue pointers

void enqueue(int node) {
    queue[rear++] = node;
}

int dequeue() {
    return queue[front++];
}

bool isQueueEmpty() {
    return front == rear;
}

int min(int a, int b) {
    return a < b ? a : b;
}

int maximumFlow(int source, int sink, int numNodes) {
   int i,j;
   while (true) {

        // Initialize labels
        for (i = 0; i < numNodes; i++) {
            l[i] = -1;  // -1 means unlabeled
        }
        l[source] = INT_MAX;  // Label source with infinite capacity

        // Initialize the queue
        front = rear = 0;
        enqueue(source);

        // BFS to label vertices
        while (!isQueueEmpty()) {
            int i = dequeue();

            // Forward edges
            for ( j = 0; j < numNodes; j++) {
                if (l[j] == -1) {  // If j is unlabeled
                    int rij = u[i][j] - x[i][j];  // Residual capacity
                    if (rij > 0) {
                        l[j] = min(l[i], rij);  // Label j
                        enqueue(j);
                        if (j == sink) break;  // Stop if sink is labeled
                    }
                }
            }

            // Backward edges
            for ( j = 0; j < numNodes; j++) {
                if (l[j] == -1) {  // If j is unlabeled
                    int xji = x[j][i];  // Flow in the backward edge
                    if (xji > 0) {
                        l[j] = min(l[i], xji);  // Label j
                        enqueue(j);
                        if (j == sink) break;  // Stop if sink is labeled
                    }
                }
            }
        }

        // If sink is not labeled, the maximum flow is reached
        if (l[sink] == -1) {
            break;
        }

        // Augment along the augmenting path found
        int j = sink;
        while (j != source) {
            int i;
            // Find parent of j
            for (i = 0; i < numNodes; i++) {
                if (l[i] != -1 && (u[i][j] - x[i][j] > 0 || x[j][i] > 0)) {
                    break;
                }
            }

            if (u[i][j] - x[i][j] > 0) {  // Forward edge
                x[i][j] += l[sink];
            } else {  // Backward edge
                x[j][i] -= l[sink];
            }
            j = i;
        }
    }

    // Calculate the maximum flow
    int maxFlow = 0;
    for ( i = 0; i < numNodes; i++) {
        maxFlow += x[source][i];
    }
    return maxFlow;
}

int main() {
    int numNodes, source,i,j, sink;

    // Input number of nodes, source, and sink
    printf("Enter number of nodes: ");
    scanf("%d", &numNodes);
    printf("Enter source node: ");
    scanf("%d", &source);
    printf("Enter sink node: ");
    scanf("%d", &sink);

    // Input the capacity matrix
    printf("Enter the capacity matrix:\n");
    for (i = 0; i < numNodes; i++) {
        for ( j = 0; j < numNodes; j++) {
            scanf("%d", &u[i][j]);
            x[i][j] = 0;  // Initialize flow matrix to 0
        }
    }

    int result = maximumFlow(source, sink, numNodes);
    printf("The maximum flow is: %d\n", result);

    return 0;
}
[23bcs099@mepcolinux ex8]$
