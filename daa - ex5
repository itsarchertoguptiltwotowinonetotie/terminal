Script started on Thursday 13 March 2025 04:42:41 PM IST
[23bcs112@mepcolinux ex5]$cat count.c
#include <stdio.h>
void comparisonCountingSort(int A[], int n, int S[])
{
        int Count[n],i,j;
        for ( i = 0; i < n; i++)
        {
                Count[i] = 0;
        }
        for (i = 0; i < n - 1; i++)
        {
                for ( j = i + 1; j < n; j++)
                {
                        if (A[i] < A[j])
                        {
                                Count[j]++;
                        }
                        else
                        {
                                Count[i]++;
                        }
                }
        }
        for ( i = 0; i < n; i++)
        {
                S[Count[i]] = A[i];
        }
}
void printArray(int arr[], int n)
{
        int i;
        for ( i = 0; i < n; i++)
        {
                printf("%d ", arr[i]);
        }
        printf("\n");
}

int main()
{
        int n1,i;
        printf("Enter the size of array:");
        scanf("%d",&n1);
        int A[n1];
        for(i=0;i<n1;i++)
        {
                printf("Enter the element %d:",i+1);
                scanf("%d",&A[i]);
        }
        int n = sizeof(A) / sizeof(A[0]);
        int S[n];
        comparisonCountingSort(A, n, S);
        printf("Sorted array: ");
        printArray(S, n);
        return 0;
}

[23bcs112@mepcolinux ex5]$cc count.c
[23bcs112@mepcolinux ex5]$./a.out
Enter the size of array:6
Enter the element 1:76
Enter the element 2:43
Enter the element 3:23
Enter the element 4:67
Enter the element 5:55
Enter the element 6:8
Sorted array: 8 23 43 55 67 76
[23bcs112@mepcolinux ex5]$cat horspool.c
#include <stdio.h>
#include <string.h>
#define SIZE 256

void ShiftTable(char P[], int m, int Table[])
{
        int i, j;
        for (i = 0; i < SIZE; i++)
        {
                Table[i] = m;
        }
        for (j = 0; j < m - 1; j++)
        {
                Table[(unsigned char)P[j]] = m - 1 - j;
        }
}

int HorspoolMatching(char T[], int n, char P[], int m)
{
        int Table[SIZE];
        ShiftTable(P, m, Table);
        int i = m - 1;
        while (i < n) {
                int k = 0;
                while (k < m && P[m - 1 - k] == T[i - k]) {
                        k++;
                }
                if (k == m)
                        return i - m + 1;
                i += Table[(unsigned char)T[i]];
        }
        return -1;
}

int main()
{
        printf("\n");
        printf("Enter the text: ");
        char text[100];
        fgets(text, 100, stdin);
        text[strcspn(text, "\n")] = '\0';
        printf("Enter the pattern: ");
        char pattern[100];
        fgets(pattern, 100, stdin);
        pattern[strcspn(pattern, "\n")] = '\0';
        int n = strlen(text);
        int m = strlen(pattern);
        if (m == 0 || m > n) {
                printf("Pattern not found\n");
                return 0;
        }
        int index = HorspoolMatching(text, n, pattern, m);
        if (index != -1) {
                printf("Pattern found at index %d\n", index);
        } else {
                printf("Pattern not found\n");
        }
        printf("\n");
        return 0;
}

[23bcs112@mepcolinux ex5]$cc horspool.c
[23bcs112@mepcolinux ex5]$./a.out

Enter the text: kohli_goes_down_the_ground
Enter the pattern: kiran
Pattern not found

[23bcs112@mepcolinux ex5]$./a.out

Enter the text: jim the barber
Enter the pattern: barber
Pattern found at index 8

[23bcs112@mepcolinux ex5]$exit
exit
