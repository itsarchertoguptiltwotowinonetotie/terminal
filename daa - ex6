[23bcs099@mepcolinux ex6]$ls
floyd.c  knapsack.c
[23bcs099@mepcolinux ex6]$cat floyd.c
#include <stdio.h>
#include <limits.h>
#include <stdlib.h>

void printSolution(int **dist, int V)
{
        int i,j;
        printf("The following matrix shows the shortest distances between every pair of vertices\n");
        for (i = 0; i < V; i++)
        {
                for (j = 0; j < V; j++)
                {
                        if (dist[i][j] == INT_MAX)
                                printf("%7s", "INF");
                        else
                                printf("%7d", dist[i][j]);
                }
                printf("\n");
        }
}

void floyd(int **graph, int V)
{
        int **dist;
        int i, j, k;
        dist = (int **)malloc(V * sizeof(int *));
        for (i = 0; i < V; i++)
        {
                dist[i] = (int *)malloc(V * sizeof(int));
        }
        for (i = 0; i < V; i++)
        {
                for (j = 0; j < V; j++)
                {
                        dist[i][j] = graph[i][j];
                }
        }
        for (k = 0; k < V; k++)
        {
                for (i = 0; i < V; i++)
                {
                        for (j = 0; j < V; j++)
                        {
                                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX && dist[i][k] + dist[k][j] < dist[i][j])
                                        dist[i][j] = dist[i][k] + dist[k][j];
                        }
                }
        }
        printSolution(dist, V);
        for (i = 0; i < V; i++)
        {
                free(dist[i]);
        }
        free(dist);
}

int main()
{
        int V, i, j;
        printf("Enter the number of vertices: ");
        scanf("%d", &V);
        int **graph = (int **)malloc(V * sizeof(int *));
        for (i = 0; i < V; i++)
        {
                graph[i] = (int *)malloc(V * sizeof(int));
        }
        printf("Enter the adjacency matrix (use %d for infinity):\n", INT_MAX);
        for (i = 0; i < V; i++)
        {
                for (j = 0; j < V; j++)
                {
                        scanf("%d", &graph[i][j]);
                }
        }
        floyd(graph, V);
        for (i = 0; i < V; i++)
        {
                free(graph[i]);
        }
        free(graph);
        return 0;
}
[23bcs099@mepcolinux ex6]$
[23bcs099@mepcolinux ex6]$
[23bcs099@mepcolinux ex6]$
[23bcs099@mepcolinux ex6]$cat knapsack.c
#include <stdio.h>
#include <stdlib.h>
int max(int a, int b)
{
        return (a > b) ? a : b;
}
void knapsack(int W, int wt[], int val[], int n)
{
        int i, w;
        int K[n + 1][W + 1];
        for (i = 0; i <= n; i++)
        {
                for (w = 0; w <= W; w++)
                {
                        if (i == 0 || w == 0)
                        {
                                K[i][w] = 0;
                        }
                        else if (wt[i - 1] <= w)
                        {
                                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
                        }
                        else
                        {
                                K[i][w] = K[i - 1][w];
                        }
                }
        }
        int res = K[n][W];
        printf("Maximum value in Knapsack = %d\n", res);
        w = W;
        printf("Items included in the knapsack:\n");
        for (i = n; i > 0 && res > 0; i--)
        {
                if (res == K[i - 1][w])
                        continue;
                else
                {
                        printf("Item %d (Value: %d, Weight: %d)\n", i, val[i - 1], wt[i - 1]);
                        res = res - val[i - 1];
                        w = w - wt[i - 1];
                }
        }
}
int main()
{
        int n, W, i;
        int *val, *wt;
        printf("Enter number of items: ");
        scanf("%d", &n);
        val = (int *)malloc(n * sizeof(int));
        wt = (int *)malloc(n * sizeof(int));
        for (i = 0; i < n; i++)
        {
                printf("Item %d -> Enter value, weight: ", i + 1);
                scanf("%d,%d", &val[i], &wt[i]);
        }
        printf("Enter capacity of knapsack: ");
        scanf("%d", &W);
        knapsack(W, wt, val, n);
        free(val);
        free(wt);
        return 0;
}
[23bcs099@mepcolinux ex6]$
